# -*- coding: utf-8 -*-
"""Lab 01.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GVmPCEH9XRe3vkUinPBka-zzJ6jD-VZl

# Activity 1
"""

#Activity 1
n = int(input("Enter a value: "))
if n % 2 == 0:
    print("Even")
else:
    print("Odd")

"""#Activity 2"""

sum = 0
s = input ("Enter an integer value: ")
n = int(s)
while n != 0:
  sum = sum + n
  s = input ("Enter an integer value: ")
  n = int(s)
print ("The sum of the given value is", sum)

"""#Activity 3"""

isPrime = True
i = 2
n = int(input("Enter a value: "))
while i < n:
  remainder = n % i
  if remainder == 0:
    isPrime = False
    break
  else:
    i = i + 1
if isPrime:
  print("Number is Prime")
else:
  print("Number is not Prime")

"""#Activity 4"""

summ = 0
i = 0
while i <= 4:
  s = input("Enter a value: ")
  n = int(s)
  summ = summ + n
  i = i + 1
print ("The sum of the given value is", summ)

"""#Activity 5"""

summation = 0
i = 1
while i <= 10:
  summation = summation + i
  i = i + 1
print ("The sum of the given value is", summation)

n = int(input("Enter a value: "))
print ("sum {}".format(n*(n+1)/2))

"""#Activity 6"""

name = input("What is your name? ")
print ("Hello " + name)
job = input("What is your job? ")
print ("Your job is: " + job)
num = int(input("Give me a number: "))
print("You said: " + str(num))

"""#Activity 7"""

import random

# Awroken
MINIMUM = 1
MAXIMUM = 9
NUMBER = random.randint(MINIMUM, MAXIMUM)
GUESS = None
ANOTHER = None
TRY = 0
RUNNING = True

print("Alright...")

while RUNNING:
    GUESS = input("What is your lucky number? ")

    if GUESS.lower() == "exit":
        print("Better luck next time.")
        break  # Exit the loop

    try:
        GUESS = int(GUESS)
    except ValueError:
        print("Please enter a valid number.")
        continue  # Skip the rest of the loop and ask again

    if GUESS < NUMBER:
        print("Wrong, too low.")
    elif GUESS > NUMBER:
        print("Wrong, too high.")
    elif GUESS == NUMBER:
        print(f"Yes, that's the one, {NUMBER}.")

        if TRY < 2:
            print(f"Impressive, only {TRY} tries.")
        elif 2 <= TRY < 10:
            print(f"Pretty good, {TRY} tries.")
        else:
            print(f"Bad, {TRY} tries.")

        RUNNING = False  # Stop the game
    TRY += 1

"""#Lab Task 1"""

num = input("Enter an integer: ")
reversed_num = num[::-1]
print(f"Reversed number: {reversed_num}")

"""#Lab Task 2"""

numbers = input("Enter a set of integers separated by spaces: ")
numbers = list(map(int, numbers.split()))
even_sum = 0
odd_sum = 0
for num in numbers:
    if num % 2 == 0:
        even_sum += num
    else:
        odd_sum += num
print(f"Sum of even numbers: {even_sum}")
print(f"Sum of odd numbers: {odd_sum}")

"""#Lab Task 3"""

n = int(input("Enter the number of terms: "))
a, b = 0, 1
if n <= 0:
    print("Please enter a positive integer.")
elif n == 1:
    print(a)
else:
    print(a, b, end=" ")
    for _ in range(n - 2):
        c = a + b
        print(c, end=" ")
        a, b = b, c
print()

"""#Lab Task 4"""

marks = int(input("Enter the marks of the student (1-100): "))

if marks < 0 or marks > 100:
    print("Invalid marks. Please enter a value between 1 and 100.")
elif marks < 50:
    print("Grade F")
elif 50 <= marks <= 60:
    print("Grade E")
elif 61 <= marks <= 70:
    print("Grade D")
elif 71 <= marks <= 80:
    print("Grade C")
elif 81 <= marks <= 90:
    print("Grade B")
elif 91 <= marks <= 100:
    print("Grade A")

"""#Lab Task 5"""

#Iterative
num = int(input("Enter a non-negative integer: "))
factorial_iterative = 1
if num < 0:
    print("Factorial is not defined for negative numbers.")
else:
    for i in range(1, num + 1):
        factorial_iterative *= i
    print(f"Factorial of {num} (iterative) is: {factorial_iterative}")

#Recursive
num = int(input("Enter a non-negative integer: "))
def factorial_recursive(n):
    if n == 0 or n == 1:
        return 1
    else:
        return n * factorial_recursive(n - 1)
if num >= 0:
    factorial_recursive_result = factorial_recursive(num)
    print(f"Factorial of {num} (recursive) is: {factorial_recursive_result}")